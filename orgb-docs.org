#+TITLE:      Org-balance documentation
#+AUTHOR:     Ilya Shlyakhter
#+EMAIL:      ilya_shl AT alum DOT mit DOT edu
#+INFOJS_OPT: view:info toc:nil

Org-Balance Documentation

* Introduction

  Org-balance is an [[http://orgmode.org][Org mode]] extension that helps balance your resources (time/money/etc) among your various areas of life.
  You set goals for how much to spend or how much to get done in a given area (i.e. subtree) per day/week/month, and Org-balance
  tells you how you're keeping up.  You use Org mode's normal facilities for [[http://orgmode.org/manual/Clocking-work-time.html#Clocking-work-time][clocking work time]] and [[http://orgmode.org/manual/Closing-items.html#Closing-items][closing items]], and
  Org-balance uses the resulting records to compute your actual expenditures/achievements and compare them to your goals.

  For example, suppose you have an Org file that looks like this:
  
  and now more text.

  And BEFORE.

#+BEGIN_SRC org :exports both :results replace html
  
  ,* my life
  ,*** work
  ,***** GOAL 60-80 hours/week
  ,***** Current projects
  ,******* find new funding
  ,********* GOAL 10% of [[file:orgb-docs.org::*60-80%20hours/week][60-80 hours/week]]
  ,******* supervise students
  ,********* Mike
  ,********* Jill
  ,******* solve problem N
  ,***** Longer-term projects
  ,******* prove P != NP
  ,*** hobbies
  ,***** GOAL 5 hrs/week
  ,***** remodel kitchen
  ,***** learn pottery
  ,***** hack open-source projects
  ,******* org
  ,******* gimp
  ,          
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">my life</h2>
<div class="outline-text-2" id="text-1">


</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">work</h3>
<div class="outline-text-3" id="text-1-1">


</div>

<div id="outline-container-1-1-1" class="outline-4">
<h4 id="sec-1-1-1"><span class="done GOAL"> GOAL</span> 60-80 hours/week</h4>
<div class="outline-text-4" id="text-1-1-1">

</div>

</div>

<div id="outline-container-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">Current projects</h4>
<div class="outline-text-4" id="text-1-1-2">

<ul>
<li id="sec-1-1-2-1">find new funding<br/>
<ul>
<li id="sec-1-1-2-1-1"><span class="done GOAL"> GOAL</span> 10% of <a href="orgb-docs.html">60-80 hours/week</a><br/>
</li>
</ul>
</li>
</ul>
<ul>
<li id="sec-1-1-2-2">supervise students<br/>
<ul>
<li id="sec-1-1-2-2-1">Mike<br/>
</li>
</ul>
<ul>
<li id="sec-1-1-2-2-2">Jill<br/>
</li>
</ul>
</li>
</ul>
<ul>
<li id="sec-1-1-2-3">solve problem N<br/>
</li>
</ul>
</div>

</div>

<div id="outline-container-1-1-3" class="outline-4">
<h4 id="sec-1-1-3">Longer-term projects</h4>
<div class="outline-text-4" id="text-1-1-3">

<ul>
<li id="sec-1-1-3-1">prove P != NP<br/>
</li>
</ul>
</div>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">hobbies</h3>
<div class="outline-text-3" id="text-1-2">


</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1"><span class="done GOAL"> GOAL</span> 5 hrs/week</h4>
<div class="outline-text-4" id="text-1-2-1">

</div>

</div>

<div id="outline-container-1-2-2" class="outline-4">
<h4 id="sec-1-2-2">remodel kitchen</h4>
<div class="outline-text-4" id="text-1-2-2">

</div>

</div>

<div id="outline-container-1-2-3" class="outline-4">
<h4 id="sec-1-2-3">learn pottery</h4>
<div class="outline-text-4" id="text-1-2-3">

</div>

</div>

<div id="outline-container-1-2-4" class="outline-4">
<h4 id="sec-1-2-4">hack open-source projects</h4>
<div class="outline-text-4" id="text-1-2-4">

<ul>
<li id="sec-1-2-4-1">org<br/>
</li>
</ul>
<ul>
<li id="sec-1-2-4-2">gimp<br/>

</li>
</ul>
</div>
</div>
</div>
</div>
#+END_HTML


  And AFTER.
  
  Then here are some goals you can set:
     - spend at least 10 hours/day on work
		   - make sure that includes at least 5 hours/week on project B
	  - complete at least one task every three days under project C
	  
	  - don't let yourself spend more than 10 hours/week hacking orgmode (it draws you in...)
	  
	  - spend at most $N on gifts
	  
	  - complete at least one annoying but necessary task a week
	  
	  - give yourself at most one gift for each annoying task completed.
	  
	( alternative is to give the syntax and then explain what it means ).  

  and some more notes afterwards.
  
*** notes

  -- calories example.


  -- from simple ones like "spend at least two hours per day on project A" or
  "complete at least one task per week on project B" 


  it uses the hierarchy.

  

  how much you spend or how much you get done under a
  subtree, and track how well your meet them.   

  It is simple to use but flexible.


  

  To use Org-balance, you set /goals/ for some of your subtrees stating how much of a resource you want 


  [ so, "spend" is not the right term for "done".

  maybe, org-goals would work better.

  you can set goals for how much you want to spend , to receive, or to complete
              targets  

  ]

  You can count things you spend or things you get.
  
  
  To use Org-mode, you use Org-mode's standard facilities forand marking items as DONE.

  ( include screenshots )

  Some examples of goals that you can set and track:

     - "spend at least three hours a week on project A"
	  - "spend at most $100/month on entertainment"
	  

  Org-balance uses existing Org mode facilities for, [[http://orgmode.org/manual/Tracking-TODO-state-changes.html#Tracking-TODO-state-changes][tracking TODO state changes]],, and
  [[http://orgmode.org/org.html#Properties-and-Columns][assigning values to items]].


  The only new thing you need to do is set, on some subtrees, /goals/ of the form "spend at
  least 3 hours a week" or "complete at least one task per day" or "spend at most $100 per month".  Goals are set by adding
  a special child node to a subtree, like this:

#+BEGIN_HTML
<pre>
  * work
    * open-source work
      * GOAL clockedtime at least 3 hours a week
      * Project A
      * Project B
        * ...
</pre>
#+END_HTML

  You can then easily generate reports showing how well you are meeting your goals; e.g., an agenda showing your neglected
  goals, highest-priority most-neglected goals first.

  Note that "meeting a goal" here means not achieving some aim ("learn Chinese"), but consistently spending the desired amount
  of time/money or consistently making measurable progress (completing tasks) towards that aim [fn:: Other possible terms
  for "goals" as used here might be "spending targets", "resource allocations" or "constraints".].
  In that sense, goals are like [[http://orgmode.org/org.html#Tracking-your-habits][Habits]].  However, goals are more
  general: rather than being specific TODO items, goals are spending targets that you set for entire subtrees.
  They can then be satisfied by any combination of items under a subtree, which gives you a lot of flexibility.
  For example, you could have a goal of "spend five hours per week working on open-source projects".
  You could have several different open-source projects under that headline, and time clocked working on any of them --
  in any combination -- would count towards the goal.  You can then set more specific goals such as "work at least two
  hours per week on project A".  Goals can also be specified in terms of other goals: you could say "out of the time alloted to
  open-source, spend 40% of it on project A".

  
* Usage

*** Specifying your goals

	 A goal is specified as a child of a subtree root.   It specifies a goal for its parent.  In that sense, it is like a
	 [[http://orgmode.org/org.html#Properties-and-Columns][property]] of the parent.  However, representing goals as full headlines lets you have multiple goals for a subtree
	 (e.g. for at least/atmost, for time and for money spent), and let each goal have separate priorities and appear as separate entries
	 in the agenda.

***** Basic syntax
	 	
	 	The basic syntax is: =GOAL [variable] [at least|at most] valu [per] time-period.

	 	Variable can be "clockedtime"; then valu specifies the amount of clocked time intersecting the given time period.
	 	Any other variable's value is computed from the sum of entries CLOSED in that time period or for each change to
	 	a DONE state in that period.   By default, each entry's value is 1, so the valu specifies the number of tasks
	 	done in the period.   However, some tasks may be much more valuable than others.
	 	So, if a task had a "done" property, that value is used instead of 1.
	 	You can also change the default value by setting the property =default_done= and making it [[http://orgmode.org/org.html#Property-inheritance][heritable]].
	 	Most commonly, you would set this to zero, and then give distinct values to individual tasks, where a default
	 	value does not make sense.  For example, you could have a "spend" property for budgeting; make its default zero.
	 	Whenever you spend an amount under a headline, make a task for it with the "spend" property set to the amount,
	 	and close it.  This will record spending this much at this time.  The value can be in units such as dollars.
		Or you could have unpleasantness of tasks, measured in frogs, and have a default of zero and mark some tasks as
		unpleasant.

	 	You can also include in the goal sum only tasks matching a certain condition.   E.g. tasks tagged unpleasant.
	 	You could then also have an unpleasantness value.  E.g. in frogs (after "Eat a frog every day" book).

***** More complex syntax

******* Polarity
******* Margins
		  
******* Goal dependencies

		  - as fraction of other goal
		  - setting the numerator and denominator from another goal
		  - counting things from a subtree

******* Balancing the children
		  
*** Checking your goals

	 Each goal can be met, under-met or over-met.  You can use the agenda to show the list of goals in some or all of these
	 states.

	 The state is recorded as a property under the goal, then you can use normal tags/properties search, with custom
	 sorting.

	 
	 
  	 Or you could have a node for list of new poets and new musicians you want to try.   And a goal to take one a week.

  	 Or unpleasant things.

  	 In simplest usage, you can put a /goal/ on a subtree, such as:

  	 goal_clockedtime: at least 3 hours per week

  	 The goal is for a _rate_: how you spend a resource per time.   By expressing goals as rates you make comparisons
  	 interchangeable.

  	 You can then call org-balance commands to show goals that are not being met -- either as a sparse tree in the
  	 current file, or as an agenda.  The agenda can be sorted, putting most-neglected goals first.

  	 Note that you can put goals on broad categories of things, as well as on more concrete items.
  	 You can also give goals relative in terms of other goals, e.g. .3 of parent goal.
  	 You can even do .3 of actual time spent.

  	 But you can also look at goals where you spend more time than needed.  This can help you find time
  	 for goals that are shortchanged.   You can also list goals that _are_ being met, just to pat yourself on the back.

  	 You can view a summary over any period, and it will be recalculated for that period.

  	 Besides spent time, you can also track done things.

  	 org-balance treats uniformly various resources, whether clockedtime, time passed, or resources attached to
  	 done or closed commands.

  	 this lets you do things like, show time spent per response received.   See which parts of your projects do
  	 better for this ratio, and which do worse.  Show agenda sorted by such ratios.
  	 (and possibly filtered by level.)


*** points to make

***** examples of usage

		"check on mary at least once a month"
		(set priorities, tags, organize goals into subtrees... )

		"spend 3 hours per week doing open-source.  of whatever actual time i do spend,
		spend at least half on project A and at least a third on project B."

		"spend at most $100 / month on gifts"

		"do at least one unpleasant-but-necessary thing a week"

		"hike at least once every three weekends"

		"eat out at most once a week"
		"watch tv at most 1 hour per day"

		
		reward yourself: "complete at least three projects a week"; "eat out at most once for each time you actually complete
		a project."
		    [ for the "actual", does the target need to be a goal?  if the link specifies property name, there
			 does not need to be a goal there.]

		 "watch at most one hour of tv for each ten hours spend working" 

		"spend on entertainment at most .2 of what you spend on work"  etc.

		"burn at least 2000 calories per week through exercise"

		"eat at most 2000 calories per day"
		"of the calories you eat, eat at most .3 from carbs"

		"do at least one unpleasant-but-needed thing a week"

***** comparison to Habits

******* not just for repeated tasks

********* can include one-off todos that contribute towards a goal
********* can assign different values to them

*********** eg money, calories, etc.

******* can set goals for time spent

******* can specify dependencies for goals

		  for either goal or actual thing -- e.g. of whatever actual calories i eat, i want 30% to be from carbs.


******* can even things out over time -- you can be a weekend warrior if you have to, the goal is only for the average.

		  how you meet it, is up to you.

******* goals can be high-level, so they themselves need not be todo items (though we hijack todo keyword mechanism to represent them).

******* there can be multiple dimensions

		  e.g. by unpleasantness ("eat a frog each week").
		  can represent using tags, etc.

***** comparison to clockreport

******* also supports measuring closed items, in a uniform system

***** comparison to [[http://ShouldDo.org][ShouldDo]]
		
***** that for a given wall-time period, we have length of that period and clockedtime sum and
		weighted sum of closed/done items in that period; and we can then check these ratios against any goals.
  	 	

* Installation

  Download the files =org-balance.el= and =rxx.el=; put them into your =load-path=.   Put =(require 'org-balance)= in your
  =.emacs=.
  
  Copy org-balance.el and rxx.el to your load-path.  Ideally, also byte-compile them (important for speed -- much of of cl macros).
  Set or customize some vars.

  Maybe, provide a makefile.

  Maybe, include rxx as org-balance-utils.el .  or as org-balance-elisp-utils.el and org-balance-org-utils.el .
  Though, rxx.el also makes sense as a standalone module.

  That's it.   You can try the sample orgb-example-1.org and get some reports.
  
  
* Configuring org-balance preferences

  Put all these vars into the additional group, org-balance-vars?

*** make sure .org mode is automatically enabled for .org files

	 including in xemacs
  	 
*** Possibly relevant org vars

	 
***** org-global-properties
***** org-file-properties
		
***** org-todo-keywords
		
***** org-log-done-with-time
***** org-log-done
		
***** org-clock-out-when-done
		and other things in org-clock.el
		

* Design decisions
		
* things to mention

*** rename to Orb?  or at least use orb as prefix?
  	 
*** because goals are just regular headlines, you can define subsets of goals e.g. using tags or properties.

	 

	 

  	 

  	 
  	 
  	 
